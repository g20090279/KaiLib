" Zekai's Vim Setting
" Last Revised: Sep. 09, 2024

" {{{........vim-plug
call plug#begin()
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'airblade/vim-gitgutter'
Plug 'APZelos/blamer.nvim'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/seoul256.vim'
"Plug 'morhetz/gruvbox'
call plug#end()

" Plugin related settings
let g:coc_filetype_map = {'tex': 'latex'} " Temporarily fix coc-ltex in coc.nvim
"let g:blamer_enabled = 1
let g:coc_disable_startup_warning = 1
map <F10> :NERDTreeToggle<CR>
" }}}

" {{{........Color scheme - general
" set termguicolors " for Windows
" }}}

" {{{........Color scheme - morhetz/gruvbox
"let g:gruvbox_contrast_dark='hard'
"set background=dark
"colorscheme gruvbox 
" }}}

" {{{........Color scheme - junegunn/seoul256.vim
let g:seoul256_background = 233
colorscheme seoul256
set background=dark
highlight CursorLine ctermbg=235
" }}}

" {{{........coc.nvim example config
source ~/.vim/coc-example-config.vim " on Windows: .vim -> vimfiles


" {{{........Basics Setting
" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible
set number 	   	   " enable numbering lines
set ruler
set hlsearch 		   " enable highlight the search result
set cursorline 		" highlight the cursor line
" set backspace=indent,eol,start   " fix backspace cannot delete problem
" Force Cursor to Be Block Style ###
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
" --- use powershell as default shell (only on windows)
" set shell=C:\\Program\ Files\\PowerShell\\7\\pwsh.exe
" set shellcmdflag=-command
" set shellquote=\"
" set shellxquote=
" ---
" }}}



" {{{........Porject Related Config
autocmd! vimenter,BufReadPost,BufNewFile * call SetupEnv()

function! SetupEnv()
    let l:path = expand('%:p')
    if l:path =~ 'nrsim-dl'
        source ~/vimfiles/project-config/nrsim-dl/nrsim-dl.vim
    endif
endfunction
" }}}




" {{{ ..........Status Line Setting
" for more info :help E121
" so that autocmd didn't stack up and slow down vim
augroup statusline_startup
  autocmd!
  " for more info :help WinEnter and :help BufWinEnter
  autocmd WinEnter,BufWinEnter * call StatuslineLoad('active')
  autocmd WinLeave * call StatuslineLoad('inactive')
augroup END

set laststatus=2        " always show status line

function! StatuslineMode() abort

    let l:currentmode={
        \ 'n':  'NORMAL',
        \ 'v':  'VISUAL',
        \ 'V':  'V·LINE ',
        \ '\<C-V>': 'V·BLOCK',
        \ 'i':  'INSERT',
        \ 'R':  'R',
        \ 'c':  'COMMAND'}

    let l:modecurrent = mode()
    " use get() -> fails safely, since ^V doesn't seem to register
    " 3rd arg is used when return of mode() == 0, which is case with ^V
    " thus, ^V fails -> returns 0 -> replaced with 'VB'
    let l:modelist = toupper(get(l:currentmode, l:modecurrent, 'VB'))
    let l:current_status_mode = l:modelist
    return l:current_status_mode
endfunction

" component for active window
function! StatuslineActive()
  let l:buffernumber = '%n'
  let l:modelist = {
       \ 'n'  : 'NORMAL ',
       \ 'v'  : 'VISUAL ',
       \ 'V'  : 'V·Line ',
       \ "\<C-V>" : 'V·Block ',
       \ 'i'  : 'INSERT ',
       \ 'R'  : 'R ',
       \ 'Rv' : 'V·Replace ',
       \ 'c'  : 'Command ',
       \}
  "let l:mode = '%{StatuslineMode()}'
  let l:buffernumber = '%n '
  let l:filename = '%t '
  let l:mod = '%m '
  let l:readonly = '%R '
  let l:sep = '%='
  let l:percentage = '%p%%'
  let g:gitbranchcmd = "git branch --show-current 2>/dev/null | tr -d '\n'"
  " use system() if vim-fugitive not installed
  let l:git = "%{exists('*FugitiveHead') ? FugitiveStatusline() : system(g:gitbranchcmd)} "
  let l:sep = '%='
  return l:buffernumber.l:git.l:filename.l:mod.l:readonly.l:sep.l:percentage
endfunction

" component for inactive window
function! StatuslineInactive()
  let l:buffernumber = '%n '
  let g:gitbranchcmd = "git branch --show-current 2>/dev/null | tr -d '\n'"
  let l:git = "%{exists('*FugitiveHead') ? FugitiveStatusline() : system(g:gitbranchcmd)} "
  let l:filename = '%t '
  let l:mod = '%m'
  let l:sep = '%='
  let l:percentage = '%p%%'
  return l:buffernumber.l:git.l:filename.l:mod.l:sep.l:percentage
endfunction

" load statusline using `autocmd` event with this function
function! StatuslineLoad(mode)
  if a:mode ==# 'active'
    " to make it simple, %! is to evaluate the current changes in the window
    " it can be useful for evaluate current mode in statusline. For more info:
    " :help statusline.
    setlocal statusline=%!StatuslineActive()
  else
    setlocal statusline=%!StatuslineInactive()
  endif
endfunction

" component for both active and inactive window
function! StatuslineComponent()
  " your component goes here
endfunction
" }}}

